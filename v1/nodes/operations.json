{
  "nodes": {
    "get": {
      "description": "Retrieve information about all nodes.",
      "responses": {
        "200": {
          "$ref": "responses.json#/nodesList"
        }
      },
      "parameters": [
        {
          "$ref": "parameters.json#/marker"
        },
        {
          "$ref": "parameters.json#/limit"
        },
        {
          "$ref": "parameters.json#/sortKey"
        },
        {
          "$ref": "parameters.json#/sortDir"
        }
      ]
    },
    "post": {
      "description": "Create a new node, either virtual (virt) or bare metal (bare).",
      "responses": {
        "201": {
          "description": "Indicates successful creation.",
          "schema": {
            "$ref": "models/Nodes.json"
          }
        },
        "400": {
          "description": "Indicates that the JSON payload provided does not pass validation. A required property could be missing, or a type is incorrect."
        },
        "404": {
          "description": "Indicates that one of the entities referenced in your JSON payload does not exist."
        },
        "409": {
          "description": "Indicates a conflict, possibly because an entity already exists for the given name."
        }
      },
      "parameters": [
        {
          "name": "json",
          "in": "body",
          "required": true,
          "schema": {
            "$ref": "models/createNodes.json"
          }
        }
      ]
    }
  },
  "nodesDetail": {
    "get": {
      "description": "Retrieve a list of nodes with detailed information",
      "responses": {
        "200": {
          "$ref": "responses.json#/nodesListDetailed"
        }
      },
      "parameters": [
        {
          "name": "node_uuid",
          "in": "query",
          "description": "Allows filtering the collection according to UUID",
          "type": "string",
          "format": "uuid"
        },
        {
          "$ref": "parameters.json#/marker"
        },
        {
          "$ref": "parameters.json#/limit"
        },
        {
          "$ref": "parameters.json#/sortKey"
        },
        {
          "$ref": "parameters.json#/sortDir"
        }
      ]
    }
  },
  "nodesIdentifier": {
    "parameters": [
      {
        "name": "identifier",
        "description": "UUID or logical name of a virtual node. A bare metal node has an identifier associated with an ironic_id.",
        "in": "path",
        "required": true,
        "type": "string"
      }
    ],
    "imageIdentifier": {
      "parameters": [
        {
          "name": "identifier",
          "description": "UUID or logical name of a virtual node. A bare metal node has an identifier associated with an ironic_id.",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "patch": {
      "description": "Update an existing node.",
      "parameters": [
        {
          "name": "node_uuid",
          "in": "body",
          "required": true
        },
        {
          "name": "jsonPatchDoc",
          "in": "body",
          "required": true,
          "schema": {
            "$ref": "../common/jsonPatch.json"
          }
        }
      ],
      "responses": {
        "200": {
          "$ref": "responses.json#/"
        },
        "400": {
          "$ref": "responses.json#/MalformedBody"
        },
        "404": {
          "$ref": "responses.json#/NotFound"
        }
      }
    },
    "delete": {
      "description": "Permanently deletes a given node",
      "responses": {
        "204": {
          "$ref": "responses.json#/NoContent"
        },
        "404": {
          "$ref": "responses.json#/NotFound"
        },
        "default": {
          "$ref": "responses.json#/BaseError"
        }
      }
    }
  }
}
